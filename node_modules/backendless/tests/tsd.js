/// <reference path="../libs/backendless.d.ts" />
function testMain() {
    var VERSION = Backendless.VERSION;
    var applicationId = Backendless.applicationId;
    var secretKey = Backendless.secretKey;
    var appVersion = Backendless.appVersion;
    var serverURL = Backendless.serverURL;
    var appPath = Backendless.appPath;
    var APPLICATION_ID = 'my-application-id';
    var JS_SECRET_KEY = 'my-js-secret-key';
    var APPLICATION_VERSION = 'my-app-version';
    Backendless.browser = { browser: 'string', version: 'string' };
    Backendless.initApp(APPLICATION_ID, JS_SECRET_KEY, APPLICATION_VERSION);
    Backendless.setUIState('state');
    Backendless.setUIState(null);
    Backendless.enablePromises();
}
function testUtils() {
    var isObjectResult = Backendless.Utils.isObject(null);
    var isStringResult = Backendless.Utils.isString(null);
    var isNumberResult = Backendless.Utils.isNumber(null);
    var isFunctionResult = Backendless.Utils.isFunction(null);
    var isBooleanResult = Backendless.Utils.isBoolean(null);
    var isDateResult = Backendless.Utils.isDate(null);
    var isArrayResult = Backendless.Utils.isArray(null);
    var isEmptyResult = Backendless.Utils.isEmpty(null);
    Backendless.Utils.addEvent('my-event', document.createElement('DIV'), function (event) {
    });
    Backendless.Utils.removeEvent('my-event', document.createElement('DIV'));
    Backendless.Utils.forEach({ a: 1, b: true, c: null, d: 'string' }, function (value, key, obj) {
    }, this);
}
function testLocalCache() {
    var key = 'key';
    var str = 'string';
    var obj = {};
    var arr = [];
    var num = 1234;
    var bol = true;
    var nul = null;
    var result = Backendless.LocalCache.enabled;
    var result1 = Backendless.LocalCache.exists(key);
    var result2 = Backendless.LocalCache.set(key);
    var result3 = Backendless.LocalCache.set(key, obj);
    var result4 = Backendless.LocalCache.set(key, arr);
    var result5 = Backendless.LocalCache.set(key, num);
    var result6 = Backendless.LocalCache.set(key, str);
    var result7 = Backendless.LocalCache.set(key, nul);
    var result8 = Backendless.LocalCache.set(key, bol);
    var result9 = Backendless.LocalCache.get(key);
    var result11 = Backendless.LocalCache.remove(key);
    var result12 = Backendless.LocalCache.getAll();
    var result13 = Backendless.LocalCache.getCachePolicy(key);
    var result14 = Backendless.LocalCache.serialize(obj);
    var result15 = Backendless.LocalCache.serialize(arr);
    var result16 = Backendless.LocalCache.serialize(num);
    var result17 = Backendless.LocalCache.serialize(str);
    var result18 = Backendless.LocalCache.serialize(bol);
    var result19 = Backendless.LocalCache.deserialize(key);
    Backendless.LocalCache.clear(key);
    Backendless.LocalCache.flushExpired();
}
function testAsyncClass() {
    var onSuccess = function (data) {
    };
    var onError = function (data) {
    };
    var context = this;
    var data = {};
    var async1 = new Backendless.Async(onSuccess);
    var async2 = new Backendless.Async(onSuccess, onError);
    var async3 = new Backendless.Async(onSuccess, onError, context);
    var async4 = new Backendless.Async(onSuccess, context);
    async1.success(data);
    async1.fault(data);
}
function testDataQueryClass() {
    var dataQuery = new Backendless.DataQuery();
    var properties = dataQuery.properties;
    var condition = dataQuery.condition;
    var options = dataQuery.options;
    var url = dataQuery.url;
    var str = 'str';
    dataQuery.addProperty(str);
}
function testDataStoreClass() {
    var item = {};
    var dataStore1 = Backendless.Persistence.of('str');
    var dataStore2 = Backendless.Persistence.of({});
    var dataStore3 = Backendless.Persistence.of(function () {
    });
    var model = dataStore1.model;
    var className = dataStore1.className;
    var restUrl = dataStore1.restUrl;
    var dataQuery1 = new Backendless.DataQuery();
    var dataQuery2 = { url: 'my/url' };
    var async = new Backendless.Async(function (data) {
    });
    var resultObj;
    var resultXHR;
    resultObj = dataStore1.save(item);
    resultXHR = dataStore1.save(item, async);
    resultObj = dataStore1.remove('str');
    resultObj = dataStore1.remove(item);
    resultXHR = dataStore1.remove('str', async);
    resultXHR = dataStore1.remove(item, async);
    resultObj = dataStore1.find(dataQuery1);
    resultObj = dataStore1.find(dataQuery2);
    resultObj = dataStore1.find('id');
    resultObj = dataStore1.find();
    resultXHR = dataStore1.find(dataQuery1, async);
    resultXHR = dataStore1.find(dataQuery2, async);
    resultXHR = dataStore1.find('id', async);
    resultXHR = dataStore1.find(async);
    resultObj = dataStore1.findById(dataQuery1);
    resultObj = dataStore1.findById(dataQuery2);
    resultObj = dataStore1.findById('myId');
    resultXHR = dataStore1.findById(dataQuery1, async);
    resultXHR = dataStore1.findById(dataQuery2, async);
    resultXHR = dataStore1.findById('myId', async);
    resultObj = dataStore1.findFirst();
    resultObj = dataStore1.findFirst(dataQuery1);
    resultObj = dataStore1.findFirst(dataQuery2);
    resultXHR = dataStore1.findFirst(async);
    resultXHR = dataStore1.findFirst(dataQuery1, async);
    resultXHR = dataStore1.findFirst(dataQuery2, async);
    resultObj = dataStore1.findLast();
    resultObj = dataStore1.findLast(dataQuery1);
    resultObj = dataStore1.findLast(dataQuery2);
    resultXHR = dataStore1.findLast(async);
    resultXHR = dataStore1.findLast(dataQuery1, async);
    resultXHR = dataStore1.findLast(dataQuery2, async);
    dataStore1.loadRelations(dataQuery1);
    dataStore1.loadRelations(dataQuery2);
    dataStore1.loadRelations(dataQuery1, ['item1', 'item2']);
    dataStore1.loadRelations(dataQuery2, ['item1', 'item2']);
}
function testPersistence() {
    var resultObj;
    var resultXHR;
    var dataStore = Backendless.Persistence.of('str');
    var Model;
    var async = new Backendless.Async(function (data) {
    });
    resultObj = Backendless.Persistence.save('model', {});
    resultObj = Backendless.Persistence.save(dataStore, {});
    resultXHR = Backendless.Persistence.save('model', {}, async);
    resultXHR = Backendless.Persistence.save(dataStore, {}, async);
    resultXHR = Backendless.Persistence.getView('viewName', 'whereClause', 123, 123, async);
    resultXHR = Backendless.Persistence.getView('viewName', 'whereClause', 123, async);
    resultXHR = Backendless.Persistence.getView('viewName', 'whereClause', async);
    resultXHR = Backendless.Persistence.getView('viewName', async);
    resultObj = Backendless.Persistence.getView('viewName', 'whereClause', 123, 123);
    resultObj = Backendless.Persistence.getView('viewName', 'whereClause', 123);
    resultObj = Backendless.Persistence.getView('viewName', 'whereClause');
    resultObj = Backendless.Persistence.getView('viewName');
    resultXHR = Backendless.Persistence.callStoredProcedure('spName', 'argumentValues', async);
    resultXHR = Backendless.Persistence.callStoredProcedure('spName', {}, async);
    resultObj = Backendless.Persistence.callStoredProcedure('spName', 'argumentValues');
    resultObj = Backendless.Persistence.callStoredProcedure('spName', {});
    dataStore = Backendless.Persistence.of(Model);
    dataStore = Backendless.Persistence.of('str');
    dataStore = Backendless.Persistence.of({});
    resultObj = Backendless.Persistence.describe(Model);
    resultObj = Backendless.Persistence.describe('str');
    resultObj = Backendless.Persistence.describe({});
    resultXHR = Backendless.Persistence.describe(Model, async);
    resultXHR = Backendless.Persistence.describe('str', async);
    resultXHR = Backendless.Persistence.describe({}, async);
}
function testData() {
    var resultObj;
    var resultXHR;
    var dataStore = Backendless.Persistence.of('str');
    var async = new Backendless.Async(function (data) {
    });
    resultObj = Backendless.Data.save('model', {});
    resultObj = Backendless.Data.save(dataStore, {});
    resultXHR = Backendless.Data.save('model', {}, async);
    resultXHR = Backendless.Data.save(dataStore, {}, async);
    resultXHR = Backendless.Data.getView('viewName', 'whereClause', 123, 123, async);
    resultXHR = Backendless.Data.getView('viewName', 'whereClause', 123, async);
    resultXHR = Backendless.Data.getView('viewName', 'whereClause', async);
    resultXHR = Backendless.Data.getView('viewName', async);
    resultObj = Backendless.Data.getView('viewName', 'whereClause', 123, 123);
    resultObj = Backendless.Data.getView('viewName', 'whereClause', 123);
    resultObj = Backendless.Data.getView('viewName', 'whereClause');
    resultObj = Backendless.Data.getView('viewName');
    resultXHR = Backendless.Data.callStoredProcedure('spName', 'argumentValues', async);
    resultXHR = Backendless.Data.callStoredProcedure('spName', {}, async);
    resultObj = Backendless.Data.callStoredProcedure('spName', 'argumentValues');
    resultObj = Backendless.Data.callStoredProcedure('spName', {});
    dataStore = Backendless.Data.of(function () {
    });
    dataStore = Backendless.Data.of('str');
    dataStore = Backendless.Data.of({});
    resultObj = Backendless.Data.describe(function () {
    });
    resultObj = Backendless.Data.describe('str');
    resultObj = Backendless.Data.describe({});
    resultXHR = Backendless.Data.describe(function () {
    }, async);
    resultXHR = Backendless.Data.describe('str', async);
    resultXHR = Backendless.Data.describe({}, async);
}
function testDataPermissions() {
    var userId = 'userId';
    var roleName = 'myRole';
    var dataObj = { ___class: 'myClass', objectId: 'myId' };
    var resultObj;
    var resultXHR;
    var async = new Backendless.Async(function (data) {
    });
    resultObj = Backendless.Data.Permissions.FIND.grantUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.grantUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.FIND.grantRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.grantRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.FIND.grant(dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.grant(dataObj, async);
    resultObj = Backendless.Data.Permissions.FIND.denyUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.denyUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.FIND.denyRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.denyRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.FIND.deny(dataObj);
    resultXHR = Backendless.Data.Permissions.FIND.deny(dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.grantUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.grantUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.grantRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.grantRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.grant(dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.grant(dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.denyUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.denyUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.denyRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.denyRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.REMOVE.deny(dataObj);
    resultXHR = Backendless.Data.Permissions.REMOVE.deny(dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.grantUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.grantUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.grantRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.grantRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.grant(dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.grant(dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.denyUser(userId, dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.denyUser(userId, dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.denyRole(roleName, dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.denyRole(roleName, dataObj, async);
    resultObj = Backendless.Data.Permissions.UPDATE.deny(dataObj);
    resultXHR = Backendless.Data.Permissions.UPDATE.deny(dataObj, async);
}
function testUser() {
    var newUser = new Backendless.User();
    var className = newUser.___class;
}
function testUserService() {
    var userName = 'userName';
    var identity = 'identity';
    var roleName = 'rolename';
    var password = 'password';
    var div = document.createElement('div');
    var bol = true;
    var newUser = new Backendless.User();
    var resultObj;
    var resultXHR;
    var async = new Backendless.Async(function (data) {
    });
    var restUrl = Backendless.UserService.restUrl;
    var loggedInUser = Backendless.UserService.loggedInUser();
    resultObj = Backendless.UserService.restorePassword('email');
    resultXHR = Backendless.UserService.restorePassword('email', async);
    newUser = Backendless.UserService.register(newUser);
    resultXHR = Backendless.UserService.register(newUser, async);
    newUser = Backendless.UserService.getUserRoles();
    resultXHR = Backendless.UserService.getUserRoles(async);
    newUser = Backendless.UserService.assignRole(identity, roleName);
    resultXHR = Backendless.UserService.assignRole(identity, roleName, async);
    newUser = Backendless.UserService.unassignRole(identity, roleName);
    resultXHR = Backendless.UserService.unassignRole(identity, roleName, async);
    newUser = Backendless.UserService.login(userName, password);
    newUser = Backendless.UserService.login(userName, password, bol);
    resultXHR = Backendless.UserService.login(userName, password, bol, async);
    resultXHR = Backendless.UserService.login(userName, password, null, async);
    newUser = Backendless.UserService.describeUserClass();
    resultXHR = Backendless.UserService.describeUserClass(async);
    Backendless.UserService.logout();
    resultXHR = Backendless.UserService.logout(async);
    newUser = Backendless.UserService.getCurrentUser();
    newUser = Backendless.UserService.update(newUser);
    resultXHR = Backendless.UserService.update(newUser, async);
    Backendless.UserService.loginWithFacebook();
    Backendless.UserService.loginWithFacebook({});
    Backendless.UserService.loginWithFacebook({}, {});
    Backendless.UserService.loginWithFacebook({}, {}, async);
    Backendless.UserService.loginWithFacebook({}, {}, async, true);
    Backendless.UserService.loginWithFacebook({}, {}, null, true);
    Backendless.UserService.loginWithFacebook({}, null, null, true);
    Backendless.UserService.loginWithFacebook(null, null, null, true);
    Backendless.UserService.loginWithGooglePlus();
    Backendless.UserService.loginWithGooglePlus({});
    Backendless.UserService.loginWithGooglePlus({}, {});
    Backendless.UserService.loginWithGooglePlus({}, {}, document.createElement('div'));
    Backendless.UserService.loginWithGooglePlus({}, {}, document.createElement('div'), async);
    Backendless.UserService.loginWithGooglePlus({}, {}, document.createElement('div'), async, true);
    Backendless.UserService.loginWithGooglePlus({}, {}, document.createElement('div'), null, true);
    Backendless.UserService.loginWithGooglePlus({}, {}, null, null, true);
    Backendless.UserService.loginWithGooglePlus({}, null, null, null, true);
    Backendless.UserService.loginWithGooglePlus(null, null, null, null, true);
    Backendless.UserService.loginWithTwitter();
    Backendless.UserService.loginWithTwitter({}, async);
    Backendless.UserService.loginWithTwitter({}, async, true);
    Backendless.UserService.loginWithTwitter({}, null, true);
    Backendless.UserService.loginWithTwitter(null, null, true);
    Backendless.UserService.loginWithFacebookSdk();
    Backendless.UserService.loginWithFacebookSdk({}, true);
    Backendless.UserService.loginWithFacebookSdk({}, true, async);
    Backendless.UserService.loginWithFacebookSdk({}, null, async);
    Backendless.UserService.loginWithFacebookSdk(null, null, async);
    Backendless.UserService.loginWithGooglePlusSdk();
    Backendless.UserService.loginWithGooglePlusSdk({}, true);
    Backendless.UserService.loginWithGooglePlusSdk({}, true, async);
    Backendless.UserService.loginWithGooglePlusSdk({}, null, async);
    Backendless.UserService.loginWithGooglePlusSdk(null, null, async);
    bol = Backendless.UserService.isValidLogin();
    resultXHR = Backendless.UserService.isValidLogin(async);
    Backendless.UserService.resendEmailConfirmation('email');
    Backendless.UserService.resendEmailConfirmation('email', async);
}
function testGoeService() {
    var newGeoPoint = new Backendless.GeoPoint();
    newGeoPoint.latitude = 20;
    newGeoPoint.longitude = 30;
    newGeoPoint.categories = ["c"];
    newGeoPoint.metadata = { "owner": "XXX" };
    var existPoint = new Backendless.GeoPoint();
    newGeoPoint.___class = 'c';
    newGeoPoint.objectId = 'id';
    newGeoPoint.latitude = 20;
    newGeoPoint.longitude = 30;
    var geoClaster = new Backendless.GeoCluster();
    geoClaster.___class = 'geo';
    geoClaster.objectId = 'id';
    geoClaster.latitude = 20;
    geoClaster.longitude = 30;
    geoClaster.totalPoints = 10;
    geoClaster.geoQuery = new Backendless.GeoQuery();
    var bool = true;
    var errorStr = 'str';
    var fenceName = 'str';
    var categoryName = 'str';
    var restUrl = Backendless.Geo.restUrl;
    var EARTH_RADIUS = Backendless.Geo.EARTH_RADIUS;
    var geoCollectionResult;
    var geoCategory;
    var geoCategories;
    var resultObj;
    var resultXHR;
    var async = new Backendless.Async(function (data) {
    });
    var baseGeoQuery = new Backendless.GeoQuery();
    var rectangleGeoQuery = { searchRectangle: [1, 2, 3, 4] };
    var circleGeoQuery = { latitude: 1, longitude: 1, radius: 1, units: 'm' };
    var categories = baseGeoQuery.categories;
    var includeMetadata = baseGeoQuery.includeMetadata;
    var metadata = baseGeoQuery.metadata;
    var condition = baseGeoQuery.condition;
    var relativeFindMetadata = baseGeoQuery.relativeFindMetadata;
    var relativeFindPercentThreshold = baseGeoQuery.relativeFindPercentThreshold;
    var pageSize = baseGeoQuery.pageSize;
    var searchRectangle = rectangleGeoQuery.searchRectangle;
    var latitude = circleGeoQuery.latitude;
    var longitude = circleGeoQuery.longitude;
    var radius = circleGeoQuery.radius;
    var units = circleGeoQuery.units;
    var inAppCallback = {
        onenter: function () {
        }
    };
    existPoint = Backendless.Geo.addPoint(newGeoPoint);
    resultXHR = Backendless.Geo.addPoint(newGeoPoint, async);
    geoCollectionResult = Backendless.Geo.find(baseGeoQuery);
    resultXHR = Backendless.Geo.find(baseGeoQuery, async);
    geoCollectionResult = Backendless.Geo.find(rectangleGeoQuery);
    resultXHR = Backendless.Geo.find(rectangleGeoQuery, async);
    geoCollectionResult = Backendless.Geo.find(circleGeoQuery);
    resultXHR = Backendless.Geo.find(circleGeoQuery, async);
    errorStr = Backendless.Geo.deletePoint(categoryName);
    resultXHR = Backendless.Geo.deletePoint(categoryName, async);
    errorStr = Backendless.Geo.deletePoint(existPoint);
    resultXHR = Backendless.Geo.deletePoint(existPoint, async);
    resultObj = Backendless.Geo.loadMetadata(existPoint);
    resultXHR = Backendless.Geo.loadMetadata(existPoint, async);
    resultObj = Backendless.Geo.loadMetadata(geoClaster);
    resultXHR = Backendless.Geo.loadMetadata(geoClaster, async);
    geoCollectionResult = Backendless.Geo.getClusterPoints(geoClaster);
    resultXHR = Backendless.Geo.getClusterPoints(geoClaster, async);
    geoCollectionResult = Backendless.Geo.getFencePoints(fenceName, baseGeoQuery);
    resultXHR = Backendless.Geo.getFencePoints(fenceName, baseGeoQuery, async);
    geoCollectionResult = Backendless.Geo.relativeFind(baseGeoQuery);
    resultXHR = Backendless.Geo.relativeFind(baseGeoQuery, async);
    geoCategory = Backendless.Geo.addCategory(categoryName);
    resultXHR = Backendless.Geo.addCategory(categoryName, async);
    bool = Backendless.Geo.deleteCategory(categoryName);
    resultXHR = Backendless.Geo.deleteCategory(categoryName, async);
    geoCategories = Backendless.Geo.getCategories();
    resultXHR = Backendless.Geo.getCategories(async);
    resultObj = Backendless.Geo.runOnStayAction(fenceName, existPoint);
    resultXHR = Backendless.Geo.runOnStayAction(fenceName, existPoint, async);
    resultObj = Backendless.Geo.runOnExitAction(fenceName, existPoint);
    resultXHR = Backendless.Geo.runOnExitAction(fenceName, existPoint, async);
    resultObj = Backendless.Geo.runOnEnterAction(fenceName, existPoint);
    resultXHR = Backendless.Geo.runOnEnterAction(fenceName, existPoint, async);
    Backendless.Geo.startGeofenceMonitoringWithInAppCallback(fenceName, inAppCallback);
    Backendless.Geo.startGeofenceMonitoringWithInAppCallback(fenceName, inAppCallback, async);
    Backendless.Geo.startGeofenceMonitoringWithRemoteCallback(fenceName, existPoint);
    Backendless.Geo.startGeofenceMonitoringWithRemoteCallback(fenceName, existPoint, async);
    Backendless.Geo.stopGeofenceMonitoring(fenceName);
}
function testMessaging() {
    var restUrl = Backendless.Messaging.restUrl;
    var channelProperties = Backendless.Messaging.channelProperties;
    var channelName = 'str';
    var subject = 'str';
    var messageId = 'str';
    var message = 'str';
    var resultObj;
    var resultBool = true;
    var resultXHR;
    var bodyParts = new Backendless.Bodyparts();
    var recipients = ['str'];
    var attachments = ['str'];
    var channels = ['str'];
    var expiration = 123;
    var publishOptions = new Backendless.PublishOptions();
    var deliveryOptions = new Backendless.DeliveryOptions();
    var subscription;
    var subscriptionOptions = new Backendless.SubscriptionOptions();
    var subscriptionCallback = function () {
    };
    var async = new Backendless.Async(function (data) {
    });
    subscription = Backendless.Messaging.subscribe(channelName, subscriptionCallback, subscriptionOptions);
    resultXHR = Backendless.Messaging.subscribe(channelName, subscriptionCallback, subscriptionOptions, async);
    resultObj = Backendless.Messaging.publish(channelName, message, publishOptions, deliveryOptions);
    resultXHR = Backendless.Messaging.publish(channelName, message, publishOptions, deliveryOptions, async);
    resultObj = Backendless.Messaging.sendEmail(subject, bodyParts, recipients, attachments);
    resultXHR = Backendless.Messaging.sendEmail(subject, bodyParts, recipients, attachments, async);
    resultBool = Backendless.Messaging.cancel(messageId);
    resultXHR = Backendless.Messaging.cancel(messageId, async);
    resultObj = Backendless.Messaging.registerDevice(channels, expiration);
    resultXHR = Backendless.Messaging.registerDevice(channels, expiration, async);
    resultObj = Backendless.Messaging.getRegistrations();
    resultXHR = Backendless.Messaging.getRegistrations(async);
    resultObj = Backendless.Messaging.unregisterDevice();
    resultXHR = Backendless.Messaging.unregisterDevice(async);
}
function testFilesService() {
    var path = 'str';
    var fileName = 'str';
    var fileContent = new Blob();
    var pattern = 'str';
    var recursively = true;
    var pageSize = 123;
    var offset = 123;
    var overwrite = true;
    var file;
    var files = [file];
    var oldPathName = 'str';
    var newName = 'str';
    var sourcePath = 'str';
    var targetPath = 'str';
    var fileURL = 'str';
    var userid = 'str';
    var url = 'str';
    var permissionType = 'str';
    var roleName = 'str';
    var resultStr;
    var resultBool;
    var resultObj;
    var resultXHR;
    var async = new Backendless.Async(function (data) {
    });
    resultStr = Backendless.Files.restUrl;
    resultStr = Backendless.Files.Permissions.restUrl;
    resultBool = Backendless.Files.saveFile(path, fileName, fileContent, overwrite);
    resultBool = Backendless.Files.saveFile(path, fileName, fileContent);
    Backendless.Files.saveFile(path, fileName, fileContent, overwrite, async);
    Backendless.Files.saveFile(path, fileName, fileContent, async);
    Backendless.Files.upload(file, path, overwrite, async);
    Backendless.Files.upload(files, path, overwrite, async);
    Backendless.Files.upload(file, path, null, async);
    Backendless.Files.upload(files, path, null, async);
    resultObj = Backendless.Files.listing(path);
    resultXHR = Backendless.Files.listing(path, async);
    resultObj = Backendless.Files.listing(path, pattern);
    resultXHR = Backendless.Files.listing(path, pattern, async);
    resultObj = Backendless.Files.listing(path, pattern, recursively);
    resultXHR = Backendless.Files.listing(path, pattern, recursively, async);
    resultObj = Backendless.Files.listing(path, pattern, recursively, pageSize);
    resultXHR = Backendless.Files.listing(path, pattern, recursively, pageSize, async);
    resultObj = Backendless.Files.listing(path, pattern, recursively, pageSize, offset);
    resultXHR = Backendless.Files.listing(path, pattern, recursively, pageSize, offset, async);
    resultObj = Backendless.Files.renameFile(oldPathName, newName);
    Backendless.Files.renameFile(oldPathName, newName, async);
    resultObj = Backendless.Files.moveFile(sourcePath, targetPath);
    Backendless.Files.moveFile(sourcePath, targetPath, async);
    resultObj = Backendless.Files.copyFile(sourcePath, targetPath);
    Backendless.Files.copyFile(sourcePath, targetPath, async);
    Backendless.Files.remove(fileURL);
    Backendless.Files.remove(fileURL, async);
    resultObj = Backendless.Files.exists(path);
    resultXHR = Backendless.Files.exists(path, async);
    Backendless.Files.removeDirectory(path);
    Backendless.Files.removeDirectory(path, async);
    resultObj = Backendless.Files.Permissions.grantUser(userid, url, permissionType);
    resultXHR = Backendless.Files.Permissions.grantUser(userid, url, permissionType, async);
    resultObj = Backendless.Files.Permissions.grantRole(roleName, url, permissionType);
    resultXHR = Backendless.Files.Permissions.grantRole(roleName, url, permissionType, async);
    resultObj = Backendless.Files.Permissions.denyUser(userid, url, permissionType);
    resultXHR = Backendless.Files.Permissions.denyUser(userid, url, permissionType, async);
    resultObj = Backendless.Files.Permissions.denyRole(roleName, url, permissionType);
    resultXHR = Backendless.Files.Permissions.denyRole(roleName, url, permissionType, async);
}
function testCommerce() {
    var packageName = 'str';
    var productId = 'str';
    var token = 'str';
    var subscriptionId = 'str';
    var async = new Backendless.Async(function (data) {
    });
    var resultStr;
    var resultObj;
    var resultXHR;
    resultStr = Backendless.Commerce.restUrl;
    resultObj = Backendless.Commerce.validatePlayPurchase(packageName, productId, token);
    resultXHR = Backendless.Commerce.validatePlayPurchase(packageName, productId, token, async);
    resultObj = Backendless.Commerce.cancelPlaySubscription(packageName, subscriptionId, token);
    resultXHR = Backendless.Commerce.cancelPlaySubscription(packageName, subscriptionId, token, async);
    resultObj = Backendless.Commerce.getPlaySubscriptionStatus(packageName, subscriptionId, token);
    resultXHR = Backendless.Commerce.getPlaySubscriptionStatus(packageName, subscriptionId, token, async);
}
function testEvents() {
    var eventName = 'str';
    var eventArgs = {};
    var async = new Backendless.Async(function (data) {
    });
    var resultStr;
    var resultObj;
    var resultXHR;
    resultStr = Backendless.Events.restUrl;
    resultObj = Backendless.Events.dispatch(eventName, eventArgs);
    resultXHR = Backendless.Events.dispatch(eventName, eventArgs, async);
}
function testCache() {
    var key = 'str';
    var value = [{}, 1, 2];
    var timeToLive = 123;
    var seconds = 123;
    var date = new Date();
    var async = new Backendless.Async(function (data) {
    });
    var resultObj;
    var resultXHR;
    resultObj = Backendless.Cache.put(key, value);
    resultObj = Backendless.Cache.put(key, value, timeToLive);
    resultXHR = Backendless.Cache.put(key, value, async);
    resultXHR = Backendless.Cache.put(key, value, timeToLive, async);
    resultObj = Backendless.Cache.expireIn(key, seconds);
    resultXHR = Backendless.Cache.expireIn(key, seconds, async);
    resultObj = Backendless.Cache.expireIn(key, date);
    resultXHR = Backendless.Cache.expireIn(key, date, async);
    resultObj = Backendless.Cache.expireAt(key, seconds);
    resultXHR = Backendless.Cache.expireAt(key, seconds, async);
    resultObj = Backendless.Cache.expireAt(key, date);
    resultXHR = Backendless.Cache.expireAt(key, date, async);
    resultObj = Backendless.Cache.contains(key);
    resultXHR = Backendless.Cache.contains(key, async);
    resultObj = Backendless.Cache.get(key);
    resultXHR = Backendless.Cache.get(key, async);
    resultObj = Backendless.Cache.remove(key);
    resultXHR = Backendless.Cache.remove(key, async);
}
function testCounters() {
    var value = 123;
    var counterName = 'str';
    var expected = 123;
    var updated = 123;
    var async = new Backendless.Async(function (data) {
    });
    var resultNum = 123;
    var resultXHR;
    resultNum = Backendless.Counters.get(counterName);
    resultXHR = Backendless.Counters.get(counterName, async);
    resultNum = Backendless.Counters.getAndIncrement(counterName);
    resultXHR = Backendless.Counters.getAndIncrement(counterName, async);
    resultNum = Backendless.Counters.incrementAndGet(counterName);
    resultXHR = Backendless.Counters.incrementAndGet(counterName, async);
    resultNum = Backendless.Counters.getAndDecrement(counterName);
    resultXHR = Backendless.Counters.getAndDecrement(counterName, async);
    resultNum = Backendless.Counters.decrementAndGet(counterName);
    resultXHR = Backendless.Counters.decrementAndGet(counterName, async);
    resultNum = Backendless.Counters.addAndGet(counterName, value);
    resultXHR = Backendless.Counters.addAndGet(counterName, value, async);
    resultNum = Backendless.Counters.getAndAdd(counterName, value);
    resultXHR = Backendless.Counters.getAndAdd(counterName, value, async);
    resultNum = Backendless.Counters.compareAndSet(counterName, expected, updated);
    resultXHR = Backendless.Counters.compareAndSet(counterName, expected, updated, async);
    resultNum = Backendless.Counters.reset(counterName);
    resultXHR = Backendless.Counters.reset(counterName, async);
    var atomicInstance = Backendless.Counters.of(counterName);
    resultNum = atomicInstance.get();
    resultXHR = atomicInstance.get(async);
    resultNum = atomicInstance.getAndIncrement();
    resultXHR = atomicInstance.getAndIncrement(async);
    resultNum = atomicInstance.incrementAndGet();
    resultXHR = atomicInstance.incrementAndGet(async);
    resultNum = atomicInstance.getAndDecrement();
    resultXHR = atomicInstance.getAndDecrement(async);
    resultNum = atomicInstance.decrementAndGet();
    resultXHR = atomicInstance.decrementAndGet(async);
    resultNum = atomicInstance.addAndGet(value);
    resultXHR = atomicInstance.addAndGet(value, async);
    resultNum = atomicInstance.getAndAdd(value);
    resultXHR = atomicInstance.getAndAdd(value, async);
    resultNum = atomicInstance.compareAndSet(expected, updated);
    resultXHR = atomicInstance.compareAndSet(expected, updated, async);
    resultNum = atomicInstance.reset();
    resultXHR = atomicInstance.reset(async);
}
function testCustomServices() {
    var serviceName = 'str';
    var serviceVersion = 'str';
    var method = 'str';
    var parameters = {};
    var async = new Backendless.Async(function (data) {
    });
    var resultObj = Backendless.CustomServices.invoke(serviceName, serviceVersion, method, parameters);
    var resultXHR = Backendless.CustomServices.invoke(serviceName, serviceVersion, method, parameters, async);
}
function testLogging() {
    var numOfMessagesValue = 123;
    var timeFrequencySecValue = 123;
    var loggerName = 'str';
    var logger;
    var message = 'str';
    var restUrl = Backendless.Logging.restUrl;
    var loggers = Backendless.Logging.loggers;
    var logInfo = Backendless.Logging.logInfo;
    var messagesCount = Backendless.Logging.messagesCount;
    var numOfMessages = Backendless.Logging.numOfMessages;
    var timeFrequency = Backendless.Logging.timeFrequency;
    Backendless.Logging.setLogReportingPolicy(numOfMessagesValue, timeFrequencySecValue);
    logger = Backendless.Logging.getLogger(loggerName);
    logger.debug(message);
    logger.info(message);
    logger.warn(message);
    logger.error(message);
    logger.fatal(message);
    logger.trace(message);
}
//# sourceMappingURL=tsd.js.map